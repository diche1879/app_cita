
const connection = require('../data/db.js')

//Función para verificar las fechas a las che faltan 3 meses para llegar 
function tresMesesAntes(fecha) {
    const hoy = new Date();
    hoy.setMonth(hoy.getMonth() + 3);
    return fecha < hoy;
};

//Función que genera horas de citas entre las 8 y las 14 cada 15 minutos
function generarhorasCitas(fecha){
    //creo un array donde guardar las horas
    const horas = [];
    const inicio = new Date();
    //seteo la hora de la varianble inicio y fin 
    inicio.setHours(8, 0, 0, 0);
    const fin = new Date();
    fin.setHours(14, 0, 0, 0);

    //Mientras inicio sea < que fin se guarda en el array añadiendo 15 minutos
    while (inicio < fin) {
        horas.push(new Date(inicio));
        inicio.setMinutes(inicio.getMinutes() + 15);
    };
    return horas;
};

//función que verifica, en la BD, si ya existe una cita para el mismo residente para el mismo tipo de documento
function hayCita(id_residente, tipo_documento, cb){
   const verCita = 'SELECT COUNT(*) AS count FROM cita_dni_res WHERE id_residente = ? AND tipo_documento = ?';
   connection.query(verCita, [id_residente, tipo_documento], (err,result) => {
    if (err) {
        console.error('Error al verificar la existencia de citas:', err);
        cb(err, false);
        return;
    }

    //Obtener el número de citas del residente
    const count = result[0].count;
    //Devuelve true si hay citas, false si no hay citas. El cb(callback) null indica que no hubo errores
    cb(null, count > 0);
   })

}

//Función que verifica si existe, en la BD, ya una cita en la hora dada
function existeCitaHora(fecha_cita, cb){
    const hayCita = 'SELECT COUNT(*) AS count FROM cita_dni_res WHERE fecha_cita_res = ?';
    connection.query(hayCita, [fecha_cita], (err, result) => {
        if (err) {
            console.error('Error al verificar la existencia de citas:', err);
            cb(err, false);
            return;
        }
        const count = result[0].count;
        cb(null, count > 0);
    });
};

//Función que crea un mensaje basado en las fechas de caducidad de DNI o pasaporte
function crearAlerta(residente){
    let alertMessage = [];
    let tipoDocumento = '';

    let dniCaducidad = new Date(residente.fin_dni_res);
    //Llama la función tresMesesAntes() y le pasa la fecha de caducidad del documento si se cumple añade el mensaje de alerta al array y el asigna el valor de DNI
    if (tresMesesAntes(dniCaducidad)) {
        alertMessage.push(`Tu DNI caducará el ${dniCaducidad.toLocaleDateString()}.`);
        tipoDocumento = 'DNI';
    }

    let PspCaducidad = new Date(residente.fin_pasaporte_res);
    //Llama la función tresMesesAntes() y le pasa la fecha de caducidad del documento si se cumple añade el mensaje de alerta al array y el asigna el valor de pasaporte
    if (tresMesesAntes(PspCaducidad)) {
        alertMessage.push(`Tu pasaporte caducará el ${PspCaducidad.toLocaleDateString()}.`);
        tipoDocumento = 'Pasaporte';
    }
    return {
        alertMessage,
        tipoDocumento
    }
};

//Funcion que actualiza el campo de alerta en la BD
function actualizarAlerta(residente, alerta){
    const updateAlerta = 'UPDATE residentes_aire SET alerta =? WHERE id_residente =?';
    connection.query(updateAlerta, [alerta, residente.id_residente], (err, result) => {
        if (err) {
            console.error('Error al actualizar la alerta:', err);
            return;
        }
        console.log('mensaje de alerta actualizado');
    });
};

function programarCita(residente, tipoDocumento){
    //Calcular um mes antes de que se caduque DNI o Pasaporte.Utiliza fin_dni_res por defecto
    let unMesAntesCaducidad = new Date(residente.fin_dni_res);
    //Utiliza fin_pasaporte_res si el tipo de documento es pasaporte
    if(tipoDocumento === 'Pasaporte'){
        unMesAntesCaducidad = new Date(residente.fin_pasaporte_res);
    }
    //Le resta un mes a la fecha de caducidad
    unMesAntesCaducidad.setMonth(unMesAntesCaducidad.getMonth() - 1);

    //Busca una hora disponible en una fecha data
    function buscarHoraDisponible(fecha){
        //Crea un array con las horas de citas entre las 8 y las 14 cada 15 minutos
        const horasDisponibles = generarhorasCitas(fecha);

        // Verifica si hay horas disponibles en un index especifico
        function verificarHora(index){
            if(index >= horasDisponibles.length){
                //Verifica si no hay horas disponibles en ese día y pasa al siguiente
                fecha.setDate (fecha.getDate() + 1);
                buscarHoraDisponible(fecha);
                return;
            }

            //formatea la fecha en un formato adecuado
            const fechaCita = horasDisponibles[index];
            const formattedFechaCita = fechaCita.toISOString().slice(0,19).replace('T', ' ');

            //Verifica si existe una cita para ese residente en ese tipo de documento en esa fecha
            existeCitaHora(formattedFechaCita, (err, existe) =>{
                if (err) {
                    console.error('Error al verificar la existencia de citas:', err);
                    return;
                }
                if (!existe) {
                    //Datos para el INSERT de la cita
                    const cita = {
                        id_residente: residente.id_residente,
                        nombre_res: residente.nombre_res,
                        apellido_res: residente.apellido_res,
                        fecha_cita_res: formattedFechaCita,
                        tipo_documento: tipoDocumento
                    };
                    //Inserta la cita en la BD
                    const insertCita = 'INSERT INTO cita_dni_res (id_residente, nombre_res, apellido_res, fecha_cita_res, tipo_documento) VALUES (?,?,?,?,?)';
                    connection.query(insertCita, [cita.id_residente, cita.nombre_res, cita.apellido_res, cita.fecha_cita_res, cita.tipo_documento], (err, result) =>{
                        if (err) {
                            console.error('Error al insertar la cita:', err);
                            return;
                        }
                        console.log('Cita insertada');
                    });
                }else{
                    // Si ya existe una cita en esta hora verifica la siguiente hora disponible
                    verificarHora(index + 1);
                };
            });
        }
        // Verifica desde la primera hora disponible
        verificarHora(0);
    }
    //Busca una hora disponible un mes antes de la fecha de caducidad del documento
    buscarHoraDisponible(unMesAntesCaducidad);
};

// Función principal que verifica fechas y se comporta de consecuencia
function verificaFechas(){
    const selectCitas = 'SELECT * FROM residentes_aire';
    connection.query(selectCitas, (err, results) => {
        if (err) {
            console.error('Error al obtener los residentes:', err);
            return;
        }
        results.forEach(residente => {
            const {alertMessage, tipoDocumento} = crearAlerta(residente);

            //Si hay alerta y el tipo de documento es DNI o Pasaporte
            if(alertMessage.length > 0 && !residente.alerta){
                const alerta = alertMessage.join (' ');
                actualizarAlerta(residente, alerta);

                hayCita(residente.id_residente, tipoDocumento, (err, existe) => {
                    if (err) {
                        console.error('Error al verificar la existencia de citas:', err);
                        return;
                    }
                    if (!existe) {
                        programarCita(residente, tipoDocumento);
                    }
                });
            }
        });
    });

}

module.exports = verificaFechas;